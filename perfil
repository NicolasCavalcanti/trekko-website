<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Meu Perfil - Trekko (P√ÅGINA DE PERFIL)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .profile-avatar {
            background: linear-gradient(135deg, #059669, #047857);
        }
        .stat-card {
            background: linear-gradient(135deg, #f0fdf4, #dcfce7);
        }
        .activity-item {
            transition: all 0.3s ease;
        }
        .activity-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }
    </style>
</head>
<body class="bg-gray-50">
    <!-- Header -->
    <header class="bg-white shadow-sm">
        <nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-16">
                <div class="flex items-center">
                    <a href="https://www.trekko.com.br/" class="text-2xl font-bold text-green-600">Trekko</a>
                </div>
                <div class="hidden md:block">
                    <div class="ml-10 flex items-baseline space-x-4">
                        <a href="https://www.trekko.com.br/" class="text-gray-500 hover:text-green-600 px-3 py-2 rounded-md text-sm font-medium">In√≠cio</a>
                        <a href="trilhas.html" class="text-gray-500 hover:text-green-600 px-3 py-2 rounded-md text-sm font-medium">Trilhas</a>
                        <a href="guias.html" class="text-gray-500 hover:text-green-600 px-3 py-2 rounded-md text-sm font-medium">Guias</a>
                        <a href="sobre.html" class="text-gray-500 hover:text-green-600 px-3 py-2 rounded-md text-sm font-medium">Sobre</a>
                    </div>
                </div>
                <div class="flex items-center space-x-4">
                    <!-- User Menu -->
                    <div class="relative">
                        <button id="userMenuBtn" class="flex items-center space-x-2 text-gray-700 hover:text-green-600">
                            <span id="userName" class="font-medium">Carregando...</span>
                            <span class="text-sm">‚ñº</span>
                        </button>
                        <div id="userDropdown" class="hidden absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50">
                            <a href="perfil.html" class="block px-4 py-2 text-sm text-green-600 bg-green-50 font-medium">Meu Perfil</a>
                            <a href="#" class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Configura√ß√µes</a>
                            <button id="logoutBtn" class="block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sair</button>
                        </div>
                    </div>
                </div>
            </div>
        </nav>
    </header>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Profile Header -->
        <div class="bg-white rounded-lg shadow-sm p-6 mb-8">
            <div class="flex flex-col md:flex-row items-center md:items-start space-y-4 md:space-y-0 md:space-x-6">
                <!-- Avatar -->
                <div class="profile-avatar w-24 h-24 rounded-full flex items-center justify-center text-white text-3xl font-bold">
                    <span id="avatarInitials">T</span>
                </div>
                
                <!-- Profile Info -->
                <div class="flex-1 text-center md:text-left">
                    <h1 id="profileName" class="text-2xl font-bold text-gray-900 mb-2">Carregando...</h1>
                    <p id="profileEmail" class="text-gray-600 mb-2">email@exemplo.com</p>
                    <div class="flex flex-wrap justify-center md:justify-start gap-2 mb-4">
                        <span class="bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-medium">ü•æ Trekker</span>
                        <span id="verifiedBadge" class="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium hidden">‚úì Verificado</span>
                    </div>
                    <p id="profileBio" class="text-gray-700 max-w-2xl">Apaixonado por trilhas e aventuras na natureza. Sempre em busca de novos desafios e paisagens incr√≠veis.</p>
                </div>
                
                <!-- Edit Button -->
                <button id="editProfileBtn" class="bg-green-600 hover:bg-green-700 text-white px-6 py-2 rounded-md font-medium">
                    Editar Perfil
                </button>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <div class="stat-card rounded-lg p-6 text-center">
                <div class="text-3xl font-bold text-green-600 mb-2" id="totalTrilhas">0</div>
                <div class="text-gray-600">Trilhas Realizadas</div>
            </div>
            <div class="stat-card rounded-lg p-6 text-center">
                <div class="text-3xl font-bold text-green-600 mb-2" id="totalKm">0</div>
                <div class="text-gray-600">Km Percorridos</div>
            </div>
            <div class="stat-card rounded-lg p-6 text-center">
                <div class="text-3xl font-bold text-green-600 mb-2" id="totalGuias">0</div>
                <div class="text-gray-600">Guias Contratados</div>
            </div>
            <div class="stat-card rounded-lg p-6 text-center">
                <div class="text-3xl font-bold text-green-600 mb-2" id="nivelExperiencia">Iniciante</div>
                <div class="text-gray-600">N√≠vel</div>
            </div>
        </div>

        <!-- Content Tabs -->
        <div class="bg-white rounded-lg shadow-sm">
            <!-- Tab Navigation -->
            <div class="border-b border-gray-200">
                <nav class="flex space-x-8 px-6">
                    <button class="tab-btn active py-4 px-1 border-b-2 border-green-500 font-medium text-sm text-green-600" data-tab="atividades">
                        Minhas Atividades
                    </button>
                    <button class="tab-btn py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700" data-tab="favoritos">
                        Favoritos
                    </button>
                    <button class="tab-btn py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700" data-tab="avaliacoes">
                        Avalia√ß√µes
                    </button>
                    <button class="tab-btn py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700" data-tab="configuracoes">
                        Configura√ß√µes
                    </button>
                </nav>
            </div>

            <!-- Tab Content -->
            <div class="p-6">
                <!-- Atividades Tab -->
                <div id="atividades-tab" class="tab-content">
                    <div class="flex justify-between items-center mb-6">
                        <h2 class="text-xl font-semibold text-gray-900">Minhas Atividades Recentes</h2>
                        <button id="addActivityBtn" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md text-sm font-medium hidden">
                            + Adicionar Trilha
                        </button>
                    </div>
                    
                    <div id="activitiesContainer" class="space-y-4">
                        <!-- Atividades ser√£o carregadas aqui -->
                    </div>
                </div>
                <!-- Favoritos Tab -->
                <div id="favoritos-tab" class="tab-content hidden">
                    <h2 class="text-xl font-semibold text-gray-900 mb-6">Trilhas Favoritas</h2>
                    <div id="favoritosList" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        <!-- Favoritos ser√£o carregados aqui -->
                        <div class="text-center py-8">
                            <div class="text-gray-400 text-6xl mb-4">‚ù§Ô∏è</div>
                            <h3 class="text-lg font-medium text-gray-900 mb-2">Nenhuma trilha favorita ainda</h3>
                            <p class="text-gray-500">Suas trilhas favoritas aparecer√£o aqui.</p>
                        </div>
                    </div>
                </div>

                <!-- Avalia√ß√µes Tab -->
                <div id="avaliacoes-tab" class="tab-content hidden">
                    <h2 class="text-xl font-semibold text-gray-900 mb-6">Minhas Avalia√ß√µes</h2>
                    <div id="avaliacoesList" class="space-y-4">
                        <!-- Avalia√ß√µes ser√£o carregadas aqui -->
                        <div class="text-center py-8">
                            <div class="text-gray-400 text-6xl mb-4">‚≠ê</div>
                            <h3 class="text-lg font-medium text-gray-900 mb-2">Nenhuma avalia√ß√£o ainda</h3>
                            <p class="text-gray-500">Suas avalia√ß√µes de trilhas e guias aparecer√£o aqui.</p>
                        </div>
                    </div>
                </div>
                <!-- Configura√ß√µes Tab -->
                <div id="configuracoes-tab" class="tab-content hidden">
                    <h2 class="text-xl font-semibold text-gray-900 mb-6">Configura√ß√µes da Conta</h2>
                    
                    <div class="space-y-6">
                        <!-- Notifica√ß√µes -->
                        <div class="border border-gray-200 rounded-lg p-4">
                            <h3 class="font-medium text-gray-900 mb-4">Notifica√ß√µes</h3>
                            <div class="space-y-3">
                                <label class="flex items-center">
                                    <input type="checkbox" class="rounded border-gray-300 text-green-600 focus:ring-green-500" checked>
                                    <span class="ml-2 text-sm text-gray-700">Receber emails sobre novas trilhas</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" class="rounded border-gray-300 text-green-600 focus:ring-green-500" checked>
                                    <span class="ml-2 text-sm text-gray-700">Notifica√ß√µes de novos guias na regi√£o</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" class="rounded border-gray-300 text-green-600 focus:ring-green-500">
                                    <span class="ml-2 text-sm text-gray-700">SMS para confirma√ß√µes importantes</span>
                                </label>
                            </div>
                        </div>

                        <!-- Privacidade -->
                        <div class="border border-gray-200 rounded-lg p-4">
                            <h3 class="font-medium text-gray-900 mb-4">Privacidade</h3>
                            <div class="space-y-3">
                                <label class="flex items-center">
                                    <input type="checkbox" class="rounded border-gray-300 text-green-600 focus:ring-green-500" checked>
                                    <span class="ml-2 text-sm text-gray-700">Perfil p√∫blico</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" class="rounded border-gray-300 text-green-600 focus:ring-green-500" checked>
                                    <span class="ml-2 text-sm text-gray-700">Mostrar atividades realizadas</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" class="rounded border-gray-300 text-green-600 focus:ring-green-500">
                                    <span class="ml-2 text-sm text-gray-700">Permitir contato direto de guias</span>
                                </label>
                            </div>
                        </div>

                        <!-- A√ß√µes da Conta -->
                        <div class="border border-gray-200 rounded-lg p-4">
                            <h3 class="font-medium text-gray-900 mb-4">A√ß√µes da Conta</h3>
                            <div class="space-y-3">
                                <button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                                    Alterar Senha
                                </button>
                                <button class="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                                    Exportar Dados
                                </button>
                                <button class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-md text-sm font-medium">
                                    Excluir Conta
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- Edit Profile Modal -->
    <div id="editProfileModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4 max-h-screen overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-gray-900">Editar Perfil</h2>
                <button id="closeEditModal" class="text-gray-400 hover:text-gray-600">
                    <span class="text-2xl">&times;</span>
                </button>
            </div>
            
            <form id="editProfileForm">
                <div class="mb-4">
                    <label for="editName" class="block text-sm font-medium text-gray-700 mb-2">Nome Completo</label>
                    <input type="text" id="editName" required 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                </div>
                
                <div class="mb-4">
                    <label for="editEmail" class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                    <input type="email" id="editEmail" required 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                </div>
                
                <div class="mb-4">
                    <label for="editPhone" class="block text-sm font-medium text-gray-700 mb-2">Telefone</label>
                    <input type="tel" id="editPhone" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                </div>
                
                <div class="mb-4">
                    <label for="editLocation" class="block text-sm font-medium text-gray-700 mb-2">Localiza√ß√£o</label>
                    <input type="text" id="editLocation" placeholder="Cidade, Estado" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                </div>
                
                <div class="mb-4">
                    <label for="editBio" class="block text-sm font-medium text-gray-700 mb-2">Biografia</label>
                    <textarea id="editBio" rows="4" 
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                              placeholder="Conte um pouco sobre voc√™ e sua paix√£o por trilhas..."></textarea>
                </div>
                
                <div class="mb-6">
                    <label for="editExperienceLevel" class="block text-sm font-medium text-gray-700 mb-2">N√≠vel de Experi√™ncia</label>
                    <select id="editExperienceLevel" 
                            class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 bg-white text-gray-900">
                        <option value="iniciante">üå± Iniciante</option>
                        <option value="intermediario">ü•æ Intermedi√°rio</option>
                        <option value="avancado">üèîÔ∏è Avan√ßado</option>
                        <option value="expert">‚≠ê Expert</option>
                    </select>
                </div>
                
                <div id="editError" class="hidden mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded"></div>
                <div id="editSuccess" class="hidden mb-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded"></div>
                
                <div class="flex space-x-4">
                    <button type="submit" id="saveProfileBtn" 
                            class="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md font-medium">
                        Salvar Altera√ß√µes
                    </button>
                    <button type="button" id="cancelEditBtn" 
                            class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-2 px-4 rounded-md font-medium">
                        Cancelar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Add Trail Modal (for Guides) -->
    <div id="addTrailModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-8 max-w-2xl w-full mx-4 max-h-screen overflow-y-auto">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-2xl font-bold text-gray-900">Adicionar Trilha que Guio</h2>
                <button id="closeAddTrailModal" class="text-gray-400 hover:text-gray-600">
                    <span class="text-2xl">&times;</span>
                </button>
            </div>
            
            <form id="addTrailForm">
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                    <div>
                        <label for="trailName" class="block text-sm font-medium text-gray-700 mb-2">Nome da Trilha *</label>
                        <input type="text" id="trailName" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                               placeholder="Ex: Trilha da Pedra Bonita">
                    </div>
                    
                    <div>
                        <label for="trailLocation" class="block text-sm font-medium text-gray-700 mb-2">Localiza√ß√£o *</label>
                        <input type="text" id="trailLocation" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                               placeholder="Ex: Rio de Janeiro, RJ">
                    </div>
                </div>
                
                <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                    <div>
                        <label for="trailDistance" class="block text-sm font-medium text-gray-700 mb-2">Dist√¢ncia *</label>
                        <input type="text" id="trailDistance" required 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                               placeholder="Ex: 5.2 km">
                    </div>
                    
                    <div>
                        <label for="trailDifficulty" class="block text-sm font-medium text-gray-700 mb-2">Dificuldade *</label>
                        <select id="trailDifficulty" required 
                                class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 bg-white">
                            <option value="">Selecione...</option>
                            <option value="F√°cil">üü¢ F√°cil</option>
                            <option value="Moderado">üü° Moderado</option>
                            <option value="Dif√≠cil">üü† Dif√≠cil</option>
                            <option value="Muito dif√≠cil">üî¥ Muito dif√≠cil</option>
                            <option value="Extremo">‚ö´ Extremo</option>
                        </select>
                    </div>
                    
                    <div>
                        <label for="trailDuration" class="block text-sm font-medium text-gray-700 mb-2">Dura√ß√£o</label>
                        <input type="text" id="trailDuration" 
                               class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                               placeholder="Ex: 3 horas">
                    </div>
                </div>
                
                <div class="mb-4">
                    <label for="trailDescription" class="block text-sm font-medium text-gray-700 mb-2">Descri√ß√£o</label>
                    <textarea id="trailDescription" rows="3" 
                              class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                              placeholder="Descreva a trilha, pontos de interesse, dificuldades espec√≠ficas..."></textarea>
                </div>
                
                <div class="mb-4">
                    <label for="trailPrice" class="block text-sm font-medium text-gray-700 mb-2">Valor do Guiamento</label>
                    <input type="text" id="trailPrice" 
                           class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500"
                           placeholder="Ex: R$ 150,00 por pessoa">
                </div>
                
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Fotos e V√≠deos</label>
                    <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center">
                        <input type="file" id="trailMedia" multiple accept="image/*,video/*" class="hidden">
                        <button type="button" onclick="document.getElementById('trailMedia').click()" 
                                class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-2 rounded-md">
                            üì∑ Adicionar Fotos/V√≠deos
                        </button>
                        <p class="text-sm text-gray-500 mt-2">M√°ximo 10 arquivos, at√© 10MB cada</p>
                        <div id="mediaPreview" class="mt-4 grid grid-cols-3 gap-2"></div>
                    </div>
                </div>
                
                <div id="addTrailError" class="hidden mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded"></div>
                <div id="addTrailSuccess" class="hidden mb-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded"></div>
                
                <div class="flex space-x-4">
                    <button type="submit" id="saveTrailBtn" 
                            class="flex-1 bg-green-600 hover:bg-green-700 text-white py-2 px-4 rounded-md font-medium">
                        Adicionar Trilha
                    </button>
                    <button type="button" id="cancelAddTrailBtn" 
                            class="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-700 py-2 px-4 rounded-md font-medium">
                        Cancelar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // API Configuration
        const API_BASE_URL = 'https://g8h3ilcvjnlq.manus.space/api';
        
        // Authentication state
        let currentUser = null;
        let accessToken = null;

        // DOM Elements
        const userMenuBtn = document.getElementById('userMenuBtn');
        const userDropdown = document.getElementById('userDropdown');
        const logoutBtn = document.getElementById('logoutBtn');
        const editProfileBtn = document.getElementById('editProfileBtn');
        const editProfileModal = document.getElementById('editProfileModal');
        const closeEditModal = document.getElementById('closeEditModal');
        const cancelEditBtn = document.getElementById('cancelEditBtn');

        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            checkAuthState();
            setupEventListeners();
            setupTabs();
            loadUserProfile();
        });

        function checkAuthState() {
            // Check for userData instead of accessToken and currentUser
            const userData = localStorage.getItem('userData');
            
            if (!userData || userData === 'null') {
                // Create a default user for testing if no user data exists
                currentUser = {
                    id: 'user_' + Date.now(),
                    name: 'Usu√°rio Teste',
                    email: 'teste@exemplo.com',
                    user_type: 'trekker',
                    phone: '',
                    location: '',
                    bio: '',
                    experience_level: 'iniciante'
                };
                localStorage.setItem('userData', JSON.stringify(currentUser));
            } else {
                // Parse user data
                currentUser = JSON.parse(userData);
            }
            
            // Update header with user info
            const userNameElement = document.getElementById('userName');
            if (userNameElement) {
                userNameElement.textContent = currentUser.name;
            }
        }

        function setupEventListeners() {
            console.log('Configurando event listeners...');
            console.log('editProfileBtn encontrado:', !!editProfileBtn);
            console.log('editProfileModal encontrado:', !!editProfileModal);
            
            // User menu
            if (userMenuBtn) userMenuBtn.addEventListener('click', toggleUserDropdown);
            if (logoutBtn) logoutBtn.addEventListener('click', logout);

            // Edit profile modal
            if (editProfileBtn) {
                console.log('Adicionando event listener ao bot√£o Editar Perfil');
                editProfileBtn.addEventListener('click', openEditModal);
            } else {
                console.error('Bot√£o editProfileBtn n√£o encontrado!');
            }
            
            if (closeEditModal) closeEditModal.addEventListener('click', closeEditModalHandler);
            if (cancelEditBtn) cancelEditBtn.addEventListener('click', closeEditModalHandler);
            if (editProfileModal && document.getElementById('editProfileForm')) {
                document.getElementById('editProfileForm').addEventListener('submit', saveProfile);
            }

            // Close modal on outside click
            if (editProfileModal) {
                window.addEventListener('click', function(e) {
                    if (e.target === editProfileModal) closeEditModalHandler();
                });
            }
        }

        function setupTabs() {
            const tabBtns = document.querySelectorAll('.tab-btn');
            const tabContents = document.querySelectorAll('.tab-content');

            tabBtns.forEach(btn => {
                btn.addEventListener('click', () => {
                    const tabName = btn.getAttribute('data-tab');
                    
                    // Remove active class from all tabs
                    tabBtns.forEach(b => {
                        b.classList.remove('active', 'border-green-500', 'text-green-600');
                        b.classList.add('border-transparent', 'text-gray-500');
                    });
                    
                    // Add active class to clicked tab
                    btn.classList.add('active', 'border-green-500', 'text-green-600');
                    btn.classList.remove('border-transparent', 'text-gray-500');
                    
                    // Hide all tab contents
                    tabContents.forEach(content => content.classList.add('hidden'));
                    
                    // Show selected tab content
                    document.getElementById(tabName + '-tab').classList.remove('hidden');
                });
            });
        }

        function loadUserProfile() {
            // Update profile info
            const profileNameElement = document.getElementById('profileName');
            const profileEmailElement = document.getElementById('profileEmail');
            const avatarInitialsElement = document.getElementById('avatarInitials');
            
            if (profileNameElement) profileNameElement.textContent = currentUser.name;
            if (profileEmailElement) profileEmailElement.textContent = currentUser.email;
            
            // Update avatar initials
            if (avatarInitialsElement) {
                const initials = currentUser.name.split(' ').map(n => n[0]).join('').toUpperCase();
                avatarInitialsElement.textContent = initials;
            }

            // Show verified badge if user is verified
            if (currentUser.is_verified) {
                const verifiedBadge = document.getElementById('verifiedBadge');
                if (verifiedBadge) verifiedBadge.classList.remove('hidden');
            }

            // Reset profile stats to zero for new profiles
            resetProfileStats();
            loadUserActivities();
        }

        function resetProfileStats() {
            // Reset all stats to zero - user will build their own profile
            document.getElementById('totalTrilhas').textContent = '0';
            document.getElementById('totalKm').textContent = '0';
            document.getElementById('totalGuias').textContent = '0';
            document.getElementById('nivelExperiencia').textContent = 'Iniciante';
            
            // Clear any existing activities, favorites, and reviews for fresh start
            if (currentUser.id) {
                localStorage.removeItem(`activities_${currentUser.id}`);
                localStorage.removeItem(`favorites_${currentUser.id}`);
                localStorage.removeItem(`reviews_${currentUser.id}`);
                localStorage.removeItem(`guide_trails_${currentUser.id}`);
            }
        }

        function loadUserActivities() {
            // Check if user has any activities stored
            const userActivities = JSON.parse(localStorage.getItem(`activities_${currentUser.id}`) || '[]');
            
            const activitiesContainer = document.getElementById('activitiesContainer');
            const addActivityBtn = document.getElementById('addActivityBtn');
            
            // Show add button only for guides
            if (currentUser.user_type === 'guide') {
                addActivityBtn.classList.remove('hidden');
                addActivityBtn.onclick = openAddTrailModal;
            }
            
            if (userActivities.length === 0) {
                activitiesContainer.innerHTML = `
                    <div class="text-center py-8">
                        <div class="text-gray-400 text-6xl mb-4">üìù</div>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">Nenhuma atividade registrada ainda</h3>
                        <p class="text-gray-500 mb-4">
                            ${currentUser.user_type === 'guide' 
                                ? 'Comece adicionando trilhas que voc√™ conduz para mostrar sua experi√™ncia.' 
                                : 'Suas avalia√ß√µes e atividades aparecer√£o aqui.'}
                        </p>
                        ${currentUser.user_type === 'guide' 
                            ? '<button onclick="openAddTrailModal()" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg">Adicionar Trilha</button>' 
                            : ''}
                    </div>
                `;
                return;
            }

            // Display activities
            activitiesContainer.innerHTML = userActivities.map(activity => `
                <div class="activity-item bg-gray-50 rounded-lg p-4 border border-gray-200">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-4">
                            <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                                <span class="text-green-600 text-xl">${activity.type === 'guide' ? 'üß≠' : 'ü•æ'}</span>
                            </div>
                            <div>
                                <h3 class="font-medium text-gray-900">${activity.name}</h3>
                                <p class="text-sm text-gray-600">${activity.location} ‚Ä¢ ${activity.distance} ‚Ä¢ ${activity.difficulty}</p>
                                <p class="text-xs text-gray-500">${activity.type === 'guide' ? 'Guiada' : 'Realizada'} em ${activity.date}</p>
                                ${activity.photos && activity.photos.length > 0 ? `
                                    <div class="flex space-x-2 mt-2">
                                        ${activity.photos.slice(0, 3).map(photo => `
                                            <img src="${photo}" alt="Foto da trilha" class="w-8 h-8 rounded object-cover">
                                        `).join('')}
                                        ${activity.photos.length > 3 ? `<span class="text-xs text-gray-500">+${activity.photos.length - 3}</span>` : ''}
                                    </div>
                                ` : ''}
                            </div>
                        </div>
                        <div class="text-right">
                            ${activity.rating ? `
                                <div class="text-yellow-500 text-sm">${'‚òÖ'.repeat(activity.rating)}${'‚òÜ'.repeat(5-activity.rating)}</div>
                                <p class="text-xs text-gray-500">Avaliada</p>
                            ` : ''}
                            ${currentUser.user_type === 'guide' && activity.type === 'guide' ? `
                                <button onclick="editTrail('${activity.id}')" class="text-blue-600 hover:text-blue-800 text-xs">Editar</button>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `).join('');
        }
                                    <p class="text-sm text-gray-600">${activity.location} ‚Ä¢ ${activity.distance} ‚Ä¢ ${activity.difficulty}</p>
                                    <p class="text-xs text-gray-500">${activity.type === 'guide' ? 'Guiada' : 'Realizada'} em ${activity.date}</p>
                                    ${activity.photos && activity.photos.length > 0 ? `
                                        <div class="flex space-x-2 mt-2">
                                            ${activity.photos.slice(0, 3).map(photo => `
                                                <img src="${photo}" alt="Foto da trilha" class="w-8 h-8 rounded object-cover">
                                            `).join('')}
                                            ${activity.photos.length > 3 ? `<span class="text-xs text-gray-500">+${activity.photos.length - 3}</span>` : ''}
                                        </div>
                                    ` : ''}
                                </div>
                            </div>
                            <div class="text-right">
                                ${activity.rating ? `
                                    <div class="text-yellow-500 text-sm">${'‚òÖ'.repeat(activity.rating)}${'‚òÜ'.repeat(5-activity.rating)}</div>
                                    <p class="text-xs text-gray-500">Avaliada</p>
                                ` : ''}
                                ${currentUser.user_type === 'guide' && activity.type === 'guide' ? `
                                    <button onclick="editTrail('${activity.id}')" class="text-blue-600 hover:text-blue-800 text-xs">Editar</button>
                                ` : ''}
                            </div>
                        </div>
                    </div>
                `).join('');
            }
        }

        function toggleUserDropdown() {
            userDropdown.classList.toggle('hidden');
        }

        function openEditModal() {
            console.log('Abrindo modal de editar perfil...');
            
            if (!editProfileModal) {
                console.error('Modal de editar perfil n√£o encontrado');
                return;
            }
            
            // Populate form with current user data
            const editName = document.getElementById('editName');
            const editEmail = document.getElementById('editEmail');
            const editPhone = document.getElementById('editPhone');
            const editLocation = document.getElementById('editLocation');
            const editBio = document.getElementById('editBio');
            const editExperienceLevel = document.getElementById('editExperienceLevel');
            
            if (editName) editName.value = currentUser.name || '';
            if (editEmail) editEmail.value = currentUser.email || '';
            if (editPhone) editPhone.value = currentUser.phone || '';
            if (editLocation) editLocation.value = currentUser.location || '';
            if (editBio) editBio.value = currentUser.bio || '';
            if (editExperienceLevel) editExperienceLevel.value = currentUser.experience_level || 'iniciante';
            
            editProfileModal.classList.remove('hidden');
            console.log('Modal aberto com sucesso!');
        }

        function closeEditModalHandler() {
            console.log('Fechando modal de editar perfil...');
            if (editProfileModal) {
                editProfileModal.classList.add('hidden');
            }
            const editError = document.getElementById('editError');
            const editSuccess = document.getElementById('editSuccess');
            if (editError) editError.classList.add('hidden');
            if (editSuccess) editSuccess.classList.add('hidden');
        }

        async function saveProfile(e) {
            e.preventDefault();
            console.log('Salvando perfil...');
            
            const formData = {
                name: document.getElementById('editName').value.trim(),
                email: document.getElementById('editEmail').value.trim(),
                phone: document.getElementById('editPhone').value.trim(),
                location: document.getElementById('editLocation').value.trim(),
                bio: document.getElementById('editBio').value.trim(),
                experience_level: document.getElementById('editExperienceLevel').value
            };

            const saveBtn = document.querySelector('#editProfileForm button[type="submit"]');
            if (saveBtn) {
                saveBtn.disabled = true;
                saveBtn.textContent = 'Salvando...';
            }

            try {
                // Mock API call - in real app, this would update the user profile
                await new Promise(resolve => setTimeout(resolve, 1000));
                
                // Update local user data
                Object.assign(currentUser, formData);
                localStorage.setItem('userData', JSON.stringify(currentUser));
                
                // Update UI
                loadUserProfile();
                
                alert('Perfil atualizado com sucesso!');
                closeEditModalHandler();
                
            } catch (error) {
                console.error('Erro ao salvar perfil:', error);
                alert('Erro ao salvar perfil. Tente novamente.');
            } finally {
                if (saveBtn) {
                    saveBtn.disabled = false;
                    saveBtn.textContent = 'Salvar Altera√ß√µes';
                }
            }
        }

        async function logout() {
            try {
                // Clear local data
                localStorage.removeItem('userData');
                localStorage.removeItem('accessToken');
                localStorage.removeItem('refreshToken');
                
                // Redirect to home
                window.location.href = 'https://www.trekko.com.br/';
            } catch (error) {
                console.error('Erro no logout:', error);
                // Force redirect even if logout fails
                window.location.href = 'https://www.trekko.com.br/';
            }
        }

        function showError(elementId, message) {
            const element = document.getElementById(elementId);
            element.textContent = message;
            element.classList.remove('hidden');
        }

        function hideError(elementId) {
            const element = document.getElementById(elementId);
            element.classList.add('hidden');
        }

        function showSuccess(elementId, message) {
            const element = document.getElementById(elementId);
            element.textContent = message;
            element.classList.remove('hidden');
        }

        function hideSuccess(elementId) {
            const element = document.getElementById(elementId);
            element.classList.add('hidden');
        }

        // Trail Management Functions
        function openAddTrailModal() {
            document.getElementById('addTrailModal').classList.remove('hidden');
            document.getElementById('mediaPreview').innerHTML = '';
        }

        function closeAddTrailModal() {
            document.getElementById('addTrailModal').classList.add('hidden');
            document.getElementById('addTrailForm').reset();
            document.getElementById('mediaPreview').innerHTML = '';
            hideError('addTrailError');
            hideSuccess('addTrailSuccess');
        }

        // Handle media file selection
        document.getElementById('trailMedia').addEventListener('change', function(e) {
            const files = Array.from(e.target.files);
            const preview = document.getElementById('mediaPreview');
            preview.innerHTML = '';

            files.forEach((file, index) => {
                if (index >= 10) return; // Limit to 10 files

                const reader = new FileReader();
                reader.onload = function(e) {
                    const div = document.createElement('div');
                    div.className = 'relative';
                    
                    if (file.type.startsWith('image/')) {
                        div.innerHTML = `
                            <img src="${e.target.result}" alt="Preview" class="w-full h-20 object-cover rounded">
                            <button type="button" onclick="removeMedia(${index})" 
                                    class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 text-xs">√ó</button>
                        `;
                    } else if (file.type.startsWith('video/')) {
                        div.innerHTML = `
                            <video src="${e.target.result}" class="w-full h-20 object-cover rounded"></video>
                            <div class="absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center rounded">
                                <span class="text-white text-2xl">‚ñ∂Ô∏è</span>
                            </div>
                            <button type="button" onclick="removeMedia(${index})" 
                                    class="absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-6 h-6 text-xs">√ó</button>
                        `;
                    }
                    preview.appendChild(div);
                };
                reader.readAsDataURL(file);
            });
        });

        function removeMedia(index) {
            const fileInput = document.getElementById('trailMedia');
            const dt = new DataTransfer();
            const files = Array.from(fileInput.files);
            
            files.forEach((file, i) => {
                if (i !== index) dt.items.add(file);
            });
            
            fileInput.files = dt.files;
            fileInput.dispatchEvent(new Event('change'));
        }

        async function saveTrail(e) {
            e.preventDefault();
            
            const formData = {
                id: Date.now().toString(),
                name: document.getElementById('trailName').value.trim(),
                location: document.getElementById('trailLocation').value.trim(),
                distance: document.getElementById('trailDistance').value.trim(),
                difficulty: document.getElementById('trailDifficulty').value,
                duration: document.getElementById('trailDuration').value.trim(),
                description: document.getElementById('trailDescription').value.trim(),
                price: document.getElementById('trailPrice').value.trim(),
                type: 'guide',
                date: new Date().toLocaleDateString('pt-BR'),
                photos: [],
                videos: []
            };

            // Validate required fields
            if (!formData.name || !formData.location || !formData.distance || !formData.difficulty) {
                showError('addTrailError', 'Por favor, preencha todos os campos obrigat√≥rios.');
                return;
            }

            const saveBtn = document.getElementById('saveTrailBtn');
            saveBtn.disabled = true;
            saveBtn.textContent = 'Salvando...';

            try {
                // Process uploaded media files
                const files = Array.from(document.getElementById('trailMedia').files);
                for (const file of files) {
                    const reader = new FileReader();
                    const result = await new Promise(resolve => {
                        reader.onload = e => resolve(e.target.result);
                        reader.readAsDataURL(file);
                    });
                    
                    if (file.type.startsWith('image/')) {
                        formData.photos.push(result);
                    } else if (file.type.startsWith('video/')) {
                        formData.videos.push(result);
                    }
                }

                // Save to localStorage
                const userActivities = JSON.parse(localStorage.getItem(`activities_${currentUser.id}`) || '[]');
                userActivities.unshift(formData); // Add to beginning
                localStorage.setItem(`activities_${currentUser.id}`, JSON.stringify(userActivities));

                // Also save to guide's trail list for synchronization
                const guideTrails = JSON.parse(localStorage.getItem(`guide_trails_${currentUser.id}`) || '[]');
                guideTrails.unshift(formData);
                localStorage.setItem(`guide_trails_${currentUser.id}`, JSON.stringify(guideTrails));

                showSuccess('addTrailSuccess', 'Trilha adicionada com sucesso!');
                
                // Reload activities
                loadUserActivities();
                
                setTimeout(() => closeAddTrailModal(), 2000);
                
            } catch (error) {
                showError('addTrailError', 'Erro ao salvar trilha. Tente novamente.');
            } finally {
                saveBtn.disabled = false;
                saveBtn.textContent = 'Adicionar Trilha';
            }
        }

        function editTrail(trailId) {
            // Implementation for editing trails
            console.log('Edit trail:', trailId);
        }
    </script>
    <!-- Sistema de Autentica√ß√£o Global -->
    <script src="auth.js"></script>
    
    <!-- Script espec√≠fico da p√°gina de perfil -->
    <script>
        // Verificar se usu√°rio est√° logado ao carregar a p√°gina
        document.addEventListener('DOMContentLoaded', function() {
            // Check for userData instead of using authManager
            const userData = localStorage.getItem('userData');
            
            if (!userData || userData === 'null') {
                alert('Voc√™ precisa estar logado para acessar esta p√°gina.');
                window.location.href = 'https://www.trekko.com.br/';
                return;
            }
            
            // Parse and load user data
            const user = JSON.parse(userData);
            if (user) {
                loadUserProfile(user);
            }

            // Tab switching
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const tabName = this.dataset.tab;
                    switchTab(tabName);
                });
            });

            // Modal event listeners
            if (editProfileBtn) editProfileBtn.addEventListener('click', openEditModal);
            if (closeEditModal) closeEditModal.addEventListener('click', closeEditModalHandler);
            if (cancelEditBtn) cancelEditBtn.addEventListener('click', closeEditModalHandler);
            if (editProfileModal) {
                document.getElementById('editProfileForm').addEventListener('submit', saveProfile);
            }

            // Add Trail Modal event listeners
            const closeAddTrailModalBtn = document.getElementById('closeAddTrailModal');
            const cancelAddTrailBtn = document.getElementById('cancelAddTrailBtn');
            const addTrailForm = document.getElementById('addTrailForm');
            
            if (closeAddTrailModalBtn) closeAddTrailModalBtn.addEventListener('click', closeAddTrailModal);
            if (cancelAddTrailBtn) cancelAddTrailBtn.addEventListener('click', closeAddTrailModal);
            if (addTrailForm) addTrailForm.addEventListener('submit', saveTrail);

            // User menu
            if (userMenuBtn) userMenuBtn.addEventListener('click', toggleUserDropdown);
            if (logoutBtn) logoutBtn.addEventListener('click', logout);

            // Close dropdowns when clicking outside
            document.addEventListener('click', function(e) {
                if (userMenuBtn && !userMenuBtn.contains(e.target)) {
                    userDropdown.classList.add('hidden');
                }
            });
        });
        
        function loadUserProfile(user) {
            // Atualizar informa√ß√µes do perfil
            document.getElementById('profileName').textContent = user.name;
            document.getElementById('profileEmail').textContent = user.email;
            document.getElementById('avatarInitials').textContent = user.name.split(' ').map(n => n[0]).join('').toUpperCase();
            
            // Atualizar tipo de usu√°rio
            const userTypeBadge = document.querySelector('.bg-green-100');
            if (user.user_type === 'guia') {
                userTypeBadge.innerHTML = 'üß≠ Guia Profissional';
                userTypeBadge.className = 'bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium';
            }
        }
    </script>
</body>
</html>

