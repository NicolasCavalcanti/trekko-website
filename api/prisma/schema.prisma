generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HealthCheck {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  status    String   @default("ok")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum GuideVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum Region {
  NORTH
  NORTHEAST
  CENTRAL_WEST
  SOUTHEAST
  SOUTH
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  passwordHash String
  name         String?
  role         String        @default("user")
  status       UserStatus    @default(ACTIVE)
  deletedAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  sessions     AuthSession[]
  auditLogs    AuditLog[]
  guideProfile GuideProfile?
}

model AuthSession {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  @@index([userId])
  @@index([expiresAt])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  entity    String
  entityId  String?
  action    String
  diff      Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([entity, entityId])
}

model GuideProfile {
  id                       String                  @id @default(uuid())
  userId                   String                  @unique
  displayName              String?
  bio                      String?
  experienceYears          Int?
  languages                String[]                @default([])
  serviceAreas             String[]                @default([])
  cadasturNumber           String?                 @unique
  verificationStatus       GuideVerificationStatus @default(PENDING)
  verificationNotes        String?
  verificationReviewedAt   DateTime?
  verificationReviewedById String?
  verifiedAt               DateTime?
  rejectedAt               DateTime?
  deletedAt                DateTime?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model State {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  region    Region
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cities City[]
  trails Trail[]

  @@index([name])
  @@index([region])
}

model City {
  id        Int      @id @default(autoincrement())
  stateId   Int
  name      String
  slug      String
  isCapital Boolean  @default(false)
  latitude  Decimal? @db.Decimal(10, 7)
  longitude Decimal? @db.Decimal(10, 7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state  State   @relation(fields: [stateId], references: [id])
  parks  Park[]
  trails Trail[]

  @@unique([stateId, slug])
  @@index([stateId, name])
}

model Park {
  id          Int      @id @default(autoincrement())
  cityId      Int
  name        String
  slug        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  city City @relation(fields: [cityId], references: [id])

  @@unique([cityId, slug])
  @@index([cityId, name])
}

enum TrailDifficulty {
  EASY
  MODERATE
  HARD
  EXTREME
}

model Trail {
  id              String          @id @default(uuid())
  slug            String          @unique
  name            String
  summary         String?
  description     String?
  difficulty      TrailDifficulty @default(MODERATE)
  distanceKm      Decimal?        @db.Decimal(6, 2)
  durationMinutes Int?
  elevationGain   Int?
  elevationLoss   Int?
  maxAltitude     Int?
  minAltitude     Int?
  stateId         Int?
  cityId          Int?
  hasWaterPoints  Boolean         @default(false)
  hasCamping      Boolean         @default(false)
  paidEntry       Boolean         @default(false)
  entryFeeCents   Int?
  guideFeeCents   Int?
  meetingPoint    String?
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  state  State?  @relation(fields: [stateId], references: [id])
  city   City?   @relation(fields: [cityId], references: [id])
  medias Media[]

  @@index([stateId])
  @@index([cityId])
  @@index([difficulty])
  @@index([deletedAt])
}

model Media {
  id          String    @id @default(uuid())
  trailId     String?
  key         String    @unique
  fileName    String?
  contentType String?
  size        Int?
  title       String?
  description String?
  order       Int?
  publicUrl   String?
  uploadedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  trail Trail? @relation(fields: [trailId], references: [id])

  @@index([trailId])
  @@index([deletedAt])
  @@index([trailId, order])
}
