generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HealthCheck {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  status    String   @default("ok")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum GuideVerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

model User {
  id           String        @id @default(uuid())
  email        String        @unique
  passwordHash String
  name         String?
  role         String        @default("user")
  status       UserStatus    @default(ACTIVE)
  deletedAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  sessions     AuthSession[]
  auditLogs    AuditLog[]
  guideProfile GuideProfile?
}

model AuthSession {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?

  @@index([userId])
  @@index([expiresAt])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String?
  entity    String
  entityId  String?
  action    String
  diff      Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([entity, entityId])
}

model GuideProfile {
  id                       String                  @id @default(uuid())
  userId                   String                  @unique
  displayName              String?
  bio                      String?
  experienceYears          Int?
  languages                String[]                @default([])
  serviceAreas             String[]                @default([])
  cadasturNumber           String?                 @unique
  verificationStatus       GuideVerificationStatus @default(PENDING)
  verificationNotes        String?
  verificationReviewedAt   DateTime?
  verificationReviewedById String?
  verifiedAt               DateTime?
  rejectedAt               DateTime?
  deletedAt                DateTime?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
