generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Region {
  NORTH
  NORTHEAST
  CENTRAL_WEST
  SOUTHEAST
  SOUTH
}

enum UserRole {
  ADMIN
  GUIDE
  MEMBER
}

enum UserStatus {
  INVITED
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum Gender {
  FEMALE
  MALE
  NON_BINARY
  OTHER
  UNDISCLOSED
}

enum DocumentType {
  CPF
  CNPJ
  PASSPORT
  RG
  RNE
  DRIVER_LICENSE
}

enum GuideStatus {
  PENDING
  ACTIVE
  INACTIVE
  BLOCKED
}

enum Language {
  PORTUGUESE
  ENGLISH
  SPANISH
  FRENCH
  GERMAN
  ITALIAN
  MANDARIN
  JAPANESE
  KOREAN
  RUSSIAN
  DUTCH
  ARABIC
  HEBREW
  OTHER
}

enum TrailDifficulty {
  EASY
  MODERATE
  HARD
  EXTREME
}

enum TrailStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum TrailConditionStatus {
  GOOD
  ALERT
  RESTRICTED
  UNSAFE
  CLOSED
}

enum ExpeditionStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  WAITLISTED
  EXPIRED
}

enum PaymentProvider {
  STRIPE
  PAGSEGURO
  MERCADO_PAGO
  PAYPAL
  MANUAL
}

enum PaymentMethod {
  CREDIT_CARD
  PIX
  BOLETO
  BANK_TRANSFER
  CASH
  OTHER
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  PAID
  REFUNDED
  FAILED
  CANCELLED
  CHARGEBACK
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
  OTHER
}

enum ReviewStatus {
  PENDING
  PUBLISHED
  REJECTED
  FLAGGED
}

enum AuditActorType {
  USER
  SYSTEM
}

enum GuideRole {
  LEAD
  ASSISTANT
  SUPPORT
  LOGISTICS
}

enum AvailabilityStatus {
  AVAILABLE
  UNAVAILABLE
  RESERVED
  BLOCKED
}

enum NotificationType {
  RESERVATION_STATUS
  PAYMENT_STATUS
  EXPEDITION_UPDATE
  SYSTEM
  GUIDE_APPLICATION
  TRAIL_UPDATE
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum MetricType {
  TOTAL_USERS
  TOTAL_GUIDES
  TOTAL_TRAILS
  TOTAL_EXPEDITIONS
  TOTAL_RESERVATIONS
  TOTAL_REVENUE
  ACTIVE_USERS
  ACTIVE_EXPEDITIONS
}

enum WaitlistStatus {
  ACTIVE
  INVITED
  CONFIRMED
  CANCELLED
}

enum GuideDocumentType {
  IDENTIFICATION
  CERTIFICATION
  LICENSE
  INSURANCE
  OTHER
}

model State {
  id            Int      @id
  code          String   @unique
  name          String
  region        Region
  capitalCityId Int?     @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  capital   City?         @relation("StateCapital", fields: [capitalCityId], references: [id])
  cities    City[]
  profiles  UserProfile[]
  guides    Guide[]       @relation("GuideState")
  trails    Trail[]
  addresses Address[]

  @@index([name])
  @@index([region])
}

model City {
  id        Int      @id
  stateId   Int
  name      String
  slug      String
  isCapital Boolean  @default(false)
  latitude  Decimal? @db.Decimal(10, 7)
  longitude Decimal? @db.Decimal(10, 7)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  state       State              @relation(fields: [stateId], references: [id])
  capitalOf   State?             @relation("StateCapital")
  profiles    UserProfile[]
  guides      Guide[]            @relation("GuideCity")
  trails      Trail[]
  addresses   Address[]
  serviceArea GuideServiceArea[]

  @@unique([stateId, slug])
  @@index([stateId, name])
}

model User {
  id               String     @id @default(uuid())
  email            String     @unique
  phone            String?    @unique
  passwordHash     String
  role             UserRole   @default(MEMBER)
  status           UserStatus @default(INVITED)
  lastLoginAt      DateTime?
  emailVerifiedAt  DateTime?
  phoneVerifiedAt  DateTime?
  twoFactorEnabled Boolean    @default(false)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?

  profile                    UserProfile?
  guide                      Guide?
  sessions                   UserSession[]
  resetTokens                PasswordResetToken[]
  notifications              Notification[]
  reservations               Reservation[]
  waitlistEntries            WaitlistEntry[]
  reviews                    Review[]               @relation("UserReviews")
  reviewResponses            Review[]               @relation("ReviewResponses")
  mediaAssets                MediaAsset[]           @relation("UserMedia")
  auditLogs                  AuditLog[]             @relation("AuditActor")
  expeditionsCreated         Expedition[]           @relation("ExpeditionCreator")
  trailsCreated              Trail[]                @relation("TrailCreator")
  conditionReports           TrailConditionReport[] @relation("TrailConditionReporter")
  trailTagAssignments        TrailTagAssignment[]   @relation("TrailTagAssignedBy")
  expeditionGuideAssignments ExpeditionGuide[]      @relation("ExpeditionGuideAssignments")
  addresses                  Address[]              @relation("UserAddresses")

  @@index([status])
  @@index([role, status])
}

model UserProfile {
  id                    String        @id @default(uuid())
  userId                String        @unique
  firstName             String
  lastName              String
  displayName           String?
  birthDate             DateTime?
  gender                Gender?       @default(UNDISCLOSED)
  documentType          DocumentType?
  documentNumber        String?
  nationality           String?       @default("BR")
  bio                   String?
  avatarUrl             String?
  emergencyContactName  String?
  emergencyContactPhone String?
  stateId               Int?
  cityId                Int?
  addressLine1          String?
  addressLine2          String?
  district              String?
  postalCode            String?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  deletedAt             DateTime?

  user  User   @relation(fields: [userId], references: [id])
  state State? @relation(fields: [stateId], references: [id])
  city  City?  @relation(fields: [cityId], references: [id])

  @@unique([documentType, documentNumber])
  @@index([stateId])
  @@index([cityId])
}

model UserSession {
  id               String    @id @default(uuid())
  userId           String
  refreshTokenHash String    @unique
  userAgent        String?
  ipAddress        String?
  expiresAt        DateTime
  revokedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId, expiresAt])
}

model PasswordResetToken {
  id        String    @id @default(uuid())
  userId    String
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([expiresAt])
}

model Guide {
  id                 String      @id @default(uuid())
  userId             String      @unique
  status             GuideStatus @default(PENDING)
  cadasturNumber     String?     @unique
  cadasturIssuedAt   DateTime?
  cadasturValidUntil DateTime?
  biography          String?
  experienceYears    Int?
  baseStateId        Int?
  baseCityId         Int?
  averageRating      Decimal?    @db.Decimal(4, 2)
  totalReviews       Int         @default(0)
  verifiedAt         DateTime?
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  deletedAt          DateTime?

  user                  User                       @relation(fields: [userId], references: [id])
  baseState             State?                     @relation("GuideState", fields: [baseStateId], references: [id])
  baseCity              City?                      @relation("GuideCity", fields: [baseCityId], references: [id])
  languages             GuideLanguage[]
  serviceAreas          GuideServiceArea[]
  specialties           GuideSpecialtyAssignment[]
  availabilities        GuideAvailability[]
  documents             GuideDocument[]
  leadExpeditions       Expedition[]               @relation("ExpeditionLead")
  expeditionAssignments ExpeditionGuide[]
  reviews               Review[]                   @relation("GuideReviews")
  mediaAssets           MediaAsset[]               @relation("GuideMedia")
  addresses             Address[]                  @relation("GuideAddresses")

  @@index([status])
  @@index([baseStateId])
  @@index([baseCityId])
}

model GuideLanguage {
  guideId   String
  language  Language
  createdAt DateTime @default(now())

  guide Guide @relation(fields: [guideId], references: [id])

  @@id([guideId, language])
}

model GuideServiceArea {
  guideId   String
  cityId    Int
  createdAt DateTime @default(now())

  guide Guide @relation(fields: [guideId], references: [id])
  city  City  @relation(fields: [cityId], references: [id])

  @@id([guideId, cityId])
  @@index([cityId])
}

model GuideSpecialty {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  guides GuideSpecialtyAssignment[]

  @@unique([name])
  @@unique([slug])
}

model GuideSpecialtyAssignment {
  guideId     String
  specialtyId String
  assignedAt  DateTime @default(now())

  guide     Guide          @relation(fields: [guideId], references: [id])
  specialty GuideSpecialty @relation(fields: [specialtyId], references: [id])

  @@id([guideId, specialtyId])
  @@index([specialtyId])
}

model GuideAvailability {
  id        String             @id @default(uuid())
  guideId   String
  startDate DateTime
  endDate   DateTime
  status    AvailabilityStatus @default(AVAILABLE)
  notes     String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  deletedAt DateTime?

  guide Guide @relation(fields: [guideId], references: [id])

  @@index([guideId])
  @@index([startDate, endDate])
}

model GuideDocument {
  id        String            @id @default(uuid())
  guideId   String
  title     String
  type      GuideDocumentType @default(OTHER)
  url       String
  issuedAt  DateTime?
  expiresAt DateTime?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  deletedAt DateTime?

  guide Guide @relation(fields: [guideId], references: [id])

  @@index([guideId])
  @@index([type])
}

model Trail {
  id              String          @id @default(uuid())
  slug            String          @unique
  name            String
  headline        String?
  summary         String?
  description     String?
  difficulty      TrailDifficulty @default(MODERATE)
  status          TrailStatus     @default(DRAFT)
  distanceKm      Decimal?        @db.Decimal(6, 2)
  durationHours   Decimal?        @db.Decimal(5, 2)
  elevationGain   Int?
  elevationLoss   Int?
  maxAltitude     Int?
  minAltitude     Int?
  startLatitude   Decimal?        @db.Decimal(10, 7)
  startLongitude  Decimal?        @db.Decimal(10, 7)
  endLatitude     Decimal?        @db.Decimal(10, 7)
  endLongitude    Decimal?        @db.Decimal(10, 7)
  permitRequired  Boolean         @default(false)
  campingAllowed  Boolean         @default(false)
  isActive        Boolean         @default(true)
  highlight       Boolean         @default(false)
  maxGroupSize    Int?
  bestSeason      String?
  hazards         String?
  recommendations String?
  createdById     String?
  stateId         Int?
  cityId          Int?
  publishedAt     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  creator            User?                    @relation("TrailCreator", fields: [createdById], references: [id])
  state              State?                   @relation(fields: [stateId], references: [id])
  city               City?                    @relation(fields: [cityId], references: [id])
  expeditions        Expedition[]
  reviews            Review[]                 @relation("TrailReviews")
  tagAssignments     TrailTagAssignment[]
  featureAssignments TrailFeatureAssignment[]
  conditionReports   TrailConditionReport[]
  checkpoints        TrailCheckpoint[]
  mediaAssets        MediaAsset[]

  @@index([stateId])
  @@index([cityId])
  @@index([status])
  @@index([difficulty])
  @@index([isActive, status])
}

model TrailTag {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignments TrailTagAssignment[]

  @@unique([name])
  @@unique([slug])
}

model TrailTagAssignment {
  trailId      String
  tagId        String
  assignedById String?
  assignedAt   DateTime @default(now())

  trail      Trail    @relation(fields: [trailId], references: [id])
  tag        TrailTag @relation(fields: [tagId], references: [id])
  assignedBy User?    @relation("TrailTagAssignedBy", fields: [assignedById], references: [id])

  @@id([trailId, tagId])
  @@index([tagId])
  @@index([assignedById])
}

model TrailFeature {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  assignments TrailFeatureAssignment[]

  @@unique([name])
  @@unique([slug])
}

model TrailFeatureAssignment {
  trailId   String
  featureId String
  createdAt DateTime @default(now())

  trail   Trail        @relation(fields: [trailId], references: [id])
  feature TrailFeature @relation(fields: [featureId], references: [id])

  @@id([trailId, featureId])
  @@index([featureId])
}

model TrailConditionReport {
  id           String               @id @default(uuid())
  trailId      String
  reportedById String?
  condition    TrailConditionStatus @default(GOOD)
  reportDate   DateTime             @default(now())
  summary      String?
  details      String?
  weather      Json?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  deletedAt    DateTime?

  trail      Trail @relation(fields: [trailId], references: [id])
  reportedBy User? @relation("TrailConditionReporter", fields: [reportedById], references: [id])

  @@index([trailId])
  @@index([condition])
  @@index([reportDate])
}

model TrailCheckpoint {
  id          String    @id @default(uuid())
  trailId     String
  order       Int
  title       String
  description String?
  latitude    Decimal?  @db.Decimal(10, 7)
  longitude   Decimal?  @db.Decimal(10, 7)
  elevation   Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  trail Trail @relation(fields: [trailId], references: [id])

  @@unique([trailId, order])
  @@index([trailId])
}

model Expedition {
  id                  String           @id @default(uuid())
  slug                String           @unique
  title               String
  subtitle            String?
  description         String?
  status              ExpeditionStatus @default(DRAFT)
  difficulty          TrailDifficulty?
  startDate           DateTime
  endDate             DateTime
  bookingOpensAt      DateTime?
  bookingClosesAt     DateTime?
  meetingPoint        String?
  latitude            Decimal?         @db.Decimal(10, 7)
  longitude           Decimal?         @db.Decimal(10, 7)
  priceCents          Int
  currency            String           @default("BRL")
  maxParticipants     Int
  minimumParticipants Int?
  availableSpots      Int?
  whatIsIncluded      String?
  whatToBring         String?
  cancellationPolicy  String?
  notes               String?
  createdById         String
  leadGuideId         String?
  trailId             String?
  publishedAt         DateTime?
  cancelledAt         DateTime?
  cancellationReason  String?
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  deletedAt           DateTime?

  createdBy       User                      @relation("ExpeditionCreator", fields: [createdById], references: [id])
  leadGuide       Guide?                    @relation("ExpeditionLead", fields: [leadGuideId], references: [id])
  trail           Trail?                    @relation(fields: [trailId], references: [id])
  guides          ExpeditionGuide[]
  itinerary       ExpeditionItineraryItem[]
  equipments      ExpeditionEquipment[]
  priceTiers      ExpeditionPriceTier[]
  checklistItems  ExpeditionChecklistItem[]
  reservations    Reservation[]
  reviews         Review[]                  @relation("ExpeditionReviews")
  mediaAssets     MediaAsset[]
  waitlistEntries WaitlistEntry[]
  addresses       Address[]                 @relation("ExpeditionAddresses")

  @@index([trailId])
  @@index([status])
  @@index([startDate])
  @@index([leadGuideId])
  @@index([createdById])
}

model ExpeditionGuide {
  expeditionId String
  guideId      String
  role         GuideRole @default(ASSISTANT)
  assignedById String?
  assignedAt   DateTime  @default(now())

  expedition Expedition @relation(fields: [expeditionId], references: [id])
  guide      Guide      @relation(fields: [guideId], references: [id])
  assignedBy User?      @relation("ExpeditionGuideAssignments", fields: [assignedById], references: [id])

  @@id([expeditionId, guideId])
  @@index([guideId])
  @@index([assignedById])
}

model ExpeditionItineraryItem {
  id           String    @id @default(uuid())
  expeditionId String
  dayNumber    Int
  title        String
  description  String?
  startTime    DateTime?
  endTime      DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  expedition Expedition @relation(fields: [expeditionId], references: [id])

  @@unique([expeditionId, dayNumber, title])
  @@index([expeditionId])
}

model ExpeditionEquipment {
  id           String   @id @default(uuid())
  expeditionId String
  name         String
  description  String?
  isMandatory  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  expedition Expedition @relation(fields: [expeditionId], references: [id])

  @@unique([expeditionId, name])
  @@index([expeditionId])
}

model ExpeditionPriceTier {
  id              String    @id @default(uuid())
  expeditionId    String
  title           String
  description     String?
  priceCents      Int
  currency        String    @default("BRL")
  minGroupSize    Int?
  maxGroupSize    Int?
  bookingOpensAt  DateTime?
  bookingClosesAt DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  expedition Expedition @relation(fields: [expeditionId], references: [id])

  @@unique([expeditionId, title])
  @@index([expeditionId])
}

model ExpeditionChecklistItem {
  id           String   @id @default(uuid())
  expeditionId String
  title        String
  description  String?
  order        Int      @default(0)
  isMandatory  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  expedition Expedition @relation(fields: [expeditionId], references: [id])

  @@unique([expeditionId, title])
  @@index([expeditionId])
}

model Reservation {
  id                    String            @id @default(uuid())
  code                  String            @unique
  expeditionId          String
  userId                String
  status                ReservationStatus @default(PENDING)
  headcount             Int               @default(1)
  totalCents            Int
  feeCents              Int               @default(0)
  discountCents         Int               @default(0)
  currency              String            @default("BRL")
  emergencyContactName  String?
  emergencyContactPhone String?
  notes                 String?
  internalNotes         String?
  bookedAt              DateTime          @default(now())
  confirmedAt           DateTime?
  cancelledAt           DateTime?
  cancellationReason    String?
  expiresAt             DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  deletedAt             DateTime?

  expedition  Expedition             @relation(fields: [expeditionId], references: [id])
  user        User                   @relation(fields: [userId], references: [id])
  payments    Payment[]
  guests      ReservationGuest[]
  checklist   ReservationChecklist[]
  reviews     Review[]               @relation("ReservationReviews")
  mediaAssets MediaAsset[]

  @@unique([expeditionId, userId], map: "uniq_reservation_user_expedition")
  @@index([expeditionId])
  @@index([userId])
  @@index([status])
  @@index([bookedAt])
}

model ReservationGuest {
  id             String        @id @default(uuid())
  reservationId  String
  fullName       String
  documentType   DocumentType?
  documentNumber String?
  birthDate      DateTime?
  medicalNotes   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  deletedAt      DateTime?

  reservation Reservation @relation(fields: [reservationId], references: [id])

  @@index([reservationId])
  @@index([documentNumber])
}

model ReservationChecklist {
  id            String    @id @default(uuid())
  reservationId String
  item          String
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  reservation Reservation @relation(fields: [reservationId], references: [id])

  @@unique([reservationId, item])
  @@index([reservationId])
}

model Payment {
  id                String          @id @default(uuid())
  reservationId     String
  provider          PaymentProvider @default(MANUAL)
  method            PaymentMethod   @default(PIX)
  status            PaymentStatus   @default(PENDING)
  amountCents       Int
  feeCents          Int             @default(0)
  netAmountCents    Int?
  currency          String          @default("BRL")
  transactionId     String?
  externalReference String?
  metadata          Json?
  paidAt            DateTime?
  capturedAt        DateTime?
  cancelledAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  deletedAt         DateTime?

  reservation Reservation     @relation(fields: [reservationId], references: [id])
  refunds     PaymentRefund[]
  auditLogs   AuditLog[]

  @@index([reservationId])
  @@index([status])
  @@index([transactionId])
  @@index([provider])
  @@index([method])
}

model PaymentRefund {
  id          String        @id @default(uuid())
  paymentId   String
  amountCents Int
  reason      String?
  status      PaymentStatus @default(PENDING)
  processedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  payment Payment @relation(fields: [paymentId], references: [id])

  @@index([paymentId])
  @@index([status])
}

model Review {
  id            String       @id @default(uuid())
  reservationId String?
  expeditionId  String?
  trailId       String?
  guideId       String?
  userId        String
  rating        Int
  title         String?
  comment       String?
  status        ReviewStatus @default(PENDING)
  response      String?
  respondedAt   DateTime?
  responseById  String?
  publishedAt   DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  deletedAt     DateTime?

  reservation Reservation? @relation("ReservationReviews", fields: [reservationId], references: [id])
  expedition  Expedition?  @relation("ExpeditionReviews", fields: [expeditionId], references: [id])
  trail       Trail?       @relation("TrailReviews", fields: [trailId], references: [id])
  guide       Guide?       @relation("GuideReviews", fields: [guideId], references: [id])
  user        User         @relation("UserReviews", fields: [userId], references: [id])
  responseBy  User?        @relation("ReviewResponses", fields: [responseById], references: [id])

  @@index([expeditionId])
  @@index([trailId])
  @@index([guideId])
  @@index([userId])
  @@index([status])
  @@index([reservationId])
}

model AuditLog {
  id          String         @id @default(uuid())
  actorType   AuditActorType @default(USER)
  actorUserId String?
  action      String
  entity      String
  entityId    String?
  description String?
  ipAddress   String?
  userAgent   String?
  metadata    Json?
  paymentId   String?
  createdAt   DateTime       @default(now())

  actorUser User?    @relation("AuditActor", fields: [actorUserId], references: [id])
  payment   Payment? @relation(fields: [paymentId], references: [id])

  @@index([actorUserId])
  @@index([entity, entityId])
  @@index([paymentId])
}

model MediaAsset {
  id              String    @id @default(uuid())
  ownerId         String?
  guideId         String?
  trailId         String?
  expeditionId    String?
  reservationId   String?
  type            MediaType @default(IMAGE)
  url             String
  title           String?
  description     String?
  altText         String?
  credit          String?
  checksum        String?
  mimeType        String?
  fileSize        Int?
  width           Int?
  height          Int?
  durationSeconds Int?
  isCover         Boolean   @default(false)
  isPublic        Boolean   @default(true)
  metadata        Json?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?

  owner       User?        @relation("UserMedia", fields: [ownerId], references: [id])
  guide       Guide?       @relation("GuideMedia", fields: [guideId], references: [id])
  trail       Trail?       @relation(fields: [trailId], references: [id])
  expedition  Expedition?  @relation(fields: [expeditionId], references: [id])
  reservation Reservation? @relation(fields: [reservationId], references: [id])

  @@index([trailId])
  @@index([guideId])
  @@index([expeditionId])
  @@index([ownerId])
  @@index([reservationId])
  @@index([type])
  @@index([isCover])
}

model Notification {
  id          String             @id @default(uuid())
  userId      String
  type        NotificationType
  status      NotificationStatus @default(UNREAD)
  title       String
  message     String
  metadata    Json?
  deliveredAt DateTime?
  readAt      DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  deletedAt   DateTime?

  user User @relation(fields: [userId], references: [id])

  @@index([userId, status])
  @@index([type])
}

model MetricSnapshot {
  id         String     @id @default(uuid())
  metric     MetricType
  value      Decimal    @db.Decimal(18, 2)
  recordedAt DateTime   @default(now())
  metadata   Json?
  createdAt  DateTime   @default(now())

  @@unique([metric, recordedAt])
}

model SystemSetting {
  key         String   @id
  value       Json
  description String?
  updatedAt   DateTime @updatedAt
}

model WaitlistEntry {
  id           String         @id @default(uuid())
  expeditionId String
  userId       String
  status       WaitlistStatus @default(ACTIVE)
  position     Int
  notes        String?
  invitedAt    DateTime?
  confirmedAt  DateTime?
  removedAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  expedition Expedition @relation(fields: [expeditionId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  @@unique([expeditionId, userId])
  @@index([expeditionId])
  @@index([userId])
  @@index([expeditionId, position])
}

model Address {
  id           String    @id @default(uuid())
  label        String?
  line1        String
  line2        String?
  district     String?
  postalCode   String?
  cityId       Int?
  stateId      Int?
  country      String    @default("BR")
  latitude     Decimal?  @db.Decimal(10, 7)
  longitude    Decimal?  @db.Decimal(10, 7)
  userId       String?
  guideId      String?
  expeditionId String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  city       City?       @relation(fields: [cityId], references: [id])
  state      State?      @relation(fields: [stateId], references: [id])
  user       User?       @relation("UserAddresses", fields: [userId], references: [id])
  guide      Guide?      @relation("GuideAddresses", fields: [guideId], references: [id])
  expedition Expedition? @relation("ExpeditionAddresses", fields: [expeditionId], references: [id])

  @@index([cityId])
  @@index([stateId])
  @@index([userId])
  @@index([guideId])
  @@index([expeditionId])
}
